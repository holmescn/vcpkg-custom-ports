From: Holmes Conan <holmesconan@gmail.com>
Date: Tue, 16 Feb 2021 18:03:07 -0500
Subject: [PATCH 8/8] cross-compile for android

Change builtins build scripts.
---
diff -u a/setup.py b/setup.py
--- a/setup.py	2021-09-25 00:13:08.000000000 +0800
+++ b/setup.py	2021-09-25 00:23:50.000000000 +0800
@@ -119,6 +119,10 @@
     """
     if dir is None or not os.path.isdir(dir) or dir in dirlist:
         return
+
+    if os.path.isabs(dir) and '..' in dir:
+        dir = os.path.realpath(dir)
+ 
     for i, path in enumerate(dirlist):
         if not os.path.isabs(path):
             dirlist.insert(i + 1, dir)
@@ -248,7 +252,8 @@
         if MACOS and is_macosx_sdk_path(dir):
             f = os.path.join(sysroot, dir[1:], filename)
 
-        if os.path.exists(f): return []
+        if os.path.exists(f):
+            return [dir]
 
     # Check the additional directories
     for dir in paths:
@@ -689,7 +694,7 @@
                     for line in fp.readlines():
                         if line.startswith("gcc version"):
                             is_gcc = True
-                        elif line.startswith("clang version"):
+                        elif "clang version" in line:
                             is_clang = True
                         elif line.startswith("#include <...>"):
                             in_incdirs = True
@@ -707,6 +712,17 @@
         finally:
             os.unlink(tmpfile)
 
+        if is_gcc:
+            host = os.environ['CC'].replace('-gcc', '')
+
+        if is_clang:
+            host = os.environ['CC'].replace('-clang', '')
+
+        for d in self.compiler.include_dirs:
+            p = os.path.join(d, '..', 'lib')
+            add_dir_to_list(self.compiler.library_dirs, p)
+            add_dir_to_list(self.compiler.library_dirs, os.path.join(p, host))
+
     def add_ldflags_cppflags(self):
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -1769,6 +1785,8 @@
     def detect_uuid(self):
         # Build the _uuid module if possible
         uuid_incs = find_file("uuid.h", self.inc_dirs, ["/usr/include/uuid"])
+        if uuid_incs is None:
+            uuid_incs = find_file("uuid/uuid.h", self.inc_dirs, [])
         if uuid_incs is not None:
             if self.compiler.find_library_file(self.lib_dirs, 'uuid'):
                 uuid_libs = ['uuid']
@@ -2319,7 +2337,7 @@
             # poor man's shlex, the re module is not available yet.
             value = config_vars.get(name)
             if not value:
-                return ()
+                return []
             # This trick works because ax_check_openssl uses --libs-only-L,
             # --libs-only-l, and --cflags-only-I.
             value = ' ' + value
@@ -2329,6 +2347,18 @@
         openssl_includes = split_var('OPENSSL_INCLUDES', '-I')
         openssl_libdirs = split_var('OPENSSL_LDFLAGS', '-L')
         openssl_libs = split_var('OPENSSL_LIBS', '-l')
+        if CROSS_COMPILING:
+            openssl_libs = ['ssl', 'crypto']
+            for lib_name in openssl_libs:
+                lib_path = self.compiler.find_library_file(self.lib_dirs, lib_name)
+                if lib_path:
+                    d = os.path.dirname(lib_path)
+                    add_dir_to_list(openssl_libdirs, lib_path)
+                    if d.endswith('lib'):
+                        add_dir_to_list(openssl_includes, os.path.join(lib_path, '..', 'include'))
+                    else:
+                        add_dir_to_list(openssl_includes, os.path.join(lib_path, '..', '..', 'include'))
+
         if not openssl_libs:
             # libssl and libcrypto not found
             self.missing.extend(['_ssl', '_hashlib'])
@@ -2350,7 +2380,7 @@
         if krb5_h:
             ssl_incs.extend(krb5_h)
 
-        if config_vars.get("HAVE_X509_VERIFY_PARAM_SET1_HOST"):
+        if config_vars.get("HAVE_X509_VERIFY_PARAM_SET1_HOST") or CROSS_COMPILING:
             self.add(Extension(
                 '_ssl', ['_ssl.c'],
                 include_dirs=openssl_includes,
