#!/bin/bash
vcpkg_root=$HOME/vcpkg
packages_dir=$vcpkg_root/packages
name=python3
version=3.10.5
minSdkVersion=25
targetSdkVersion=31

# remove openssl dir
if [ -e prefab/$name ]
then
	rm -rf prefab/$name
fi

# create modules dir
modules_dir=prefab/$name/prefab/modules
mkdir -p $modules_dir

# write prefab.json
cat <<EOF > $modules_dir/../prefab.json
{
	"name": "$name",
	"schema_version": 1,
	"dependencies": [],
	"version": "$version"
}
EOF

# write AndroidManifest.xml
cat <<EOF > $modules_dir/../../AndroidManifest.xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.vcpkg.ndk.support.$name"
		  android:versionCode="1"
		  android:versionName="1.0">
    <uses-sdk android:minSdkVersion="$minSdkVersion"
	          android:targetSdkVersion="$targetSdkVersion" />
</manifest>
EOF

write_module_json() {
local module_dir=$1
cat <<EOF > $module_dir/module.json
{
	"export_libraries": [],
	"library_name": null,
	"android": {
		"export_libraries": null,
		"library_name": null
    }
}
EOF
}

write_abi_json() {
local module_dir=$1
local abi=$2
cat <<EOF > $module_dir/libs/android.$abi/abi.json
{
	"abi": "$abi",
	"api": 25,
	"ndk": 25,
	"stl": "c++_static"
}
EOF
}

copy_module() {
declare -A dict
dict[armeabi-v7a]=arm
dict[arm64-v8a]=arm64
dict[x86]=x86
dict[x86_64]=x64

local package_name=$2
local module_name=$3
local module_dir=$1/$module_name
for x in armeabi-v7a arm64-v8a x86 x86_64
do
	local arch=${dict[$x]}
	mkdir -p $module_dir/libs/android.$x
	cp -r $packages_dir/${package_name}_$arch-android/include $module_dir/libs/android.$x/
	cp $packages_dir/${package_name}_$arch-android/lib/lib*.a $module_dir/libs/android.$x/
	write_abi_json $module_dir $x
done
write_module_json $module_dir
}

copy_module $modules_dir bzip2 bz2
copy_module $modules_dir libffi ffi
copy_module $modules_dir libuuid uuid
copy_module $modules_dir sqlite3 sqlite3
copy_module $modules_dir python3 python3.10

# create aar
cd prefab/$name
zip -rq ../$name-$version.aar .
